{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20 \cb3\cf16 #ifndef TOMARC_H_INCLUDED
\par #define TOMARC_H_INCLUDED
\par 
\par 
\par \cb3\cf4 //Tomar.c
\par \cb3\cf14\b int \b0\cb1\cf0 toma_reg\cb3\cf25 (\cb3\cf14\b int \b0\cb1\cf0 fd\cb3\cf25 ,\cb3\cf14\b char \b0\cb1\cf0 buffreg\cb3\cf25 [])
\par \{
\par     \cb3\cf14\b int \b0\cb1\cf0 long_reg\cb3\cf25 ;
\par     \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 read\cb3\cf25 (\cb1\cf0 fd\cb3\cf25 , &\cb1\cf0 long_reg\cb3\cf25 , \cb3\cf12 2\cb3\cf25 ) == \cb3\cf12 0\cb3\cf25 )
\par     \{
\par         \cb3\cf14\b return\b0\cb3\cf25 (\cb3\cf12 0\cb3\cf25 );
\par     \}
\par     \cb1\cf0 long_reg \cb3\cf25 = \cb1\cf0 read\cb3\cf25 (\cb1\cf0 fd\cb3\cf25 , \cb1\cf0 buffreg\cb3\cf25 , \cb1\cf0 long_reg\cb3\cf25 );
\par     \cb3\cf14\b return\b0\cb3\cf25 (\cb1\cf0 long_reg\cb3\cf25 );
\par \}
\par 
\par \cb3\cf14\b int \b0\cb1\cf0 toma_campo\cb3\cf25 (\cb3\cf14\b char \b0\cb1\cf0 campo\cb3\cf25 [], \cb3\cf14\b char \b0\cb1\cf0 buffreg\cb3\cf25 [], \cb3\cf14\b int \b0\cb1\cf0 pos_bus\cb3\cf25 , \cb3\cf14\b int \b0\cb1\cf0 long_reg\cb3\cf25 )
\par \{
\par     \cb3\cf14\b int \b0\cb1\cf0 cpos \cb3\cf25 = \cb3\cf12 0\cb3\cf25 ;
\par     \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 pos_bus \cb3\cf25 == \cb1\cf0 long_reg\cb3\cf25 )
\par     \{
\par         \cb3\cf14\b return\b0\cb3\cf25 (\cb3\cf12 0\cb3\cf25 );
\par     \}
\par     \cb3\cf14\b while \b0\cb3\cf25 (\cb1\cf0 pos_bus \cb3\cf25 < \cb1\cf0 long_reg \cb3\cf25 && (\cb1\cf0 campo\cb3\cf25 [\cb1\cf0 cpos\cb3\cf25 ++] = \cb1\cf0 buffreg\cb3\cf25 [\cb1\cf0 pos_bus\cb3\cf25 ++]) != \cb1\cf0 DELIM_CAR\cb3\cf25 )
\par         ;
\par 
\par         \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 campo\cb3\cf25 [\cb1\cf0 cpos \cb3\cf25 - \cb3\cf12 1\cb3\cf25 ] == \cb1\cf0 DELIM_CAR\cb3\cf25 )
\par             \cb1\cf0 campo\cb3\cf25 [--\cb1\cf0 cpos\cb3\cf25 ] = \cb3\cf22 '\\0'\cb3\cf25 ;
\par         \cb3\cf14\b else
\par             \b0\cb1\cf0 campo\cb3\cf25 [\cb1\cf0 cpos\cb3\cf25 ] = \cb3\cf22 '\\0'\cb3\cf25 ;
\par     \cb3\cf14\b return\b0\cb3\cf25 (\cb1\cf0 pos_bus\cb3\cf25 );
\par \}
\par 
\par 
\par 
\par \cb3\cf16 #endif \cb3\cf4 // TOMARC_H_INCLUDED
\par }